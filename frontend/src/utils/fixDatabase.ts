import { db } from '../firebase.config';
import { collection, addDoc, getDocs, deleteDoc, doc, setDoc } from 'firebase/firestore';

// Categories with proper structure for the application
const properCategories = [
  {
    id: 'internal_delivery',
    name: 'ÿßŸÑÿ™ŸàÿµŸäŸÑ ŸàÿßŸÑŸÖÿ¥ÿßŸàŸäÿ± ÿßŸÑÿØÿßÿÆŸÑŸäÿ©',
    description: 'ÿÆÿØŸÖÿßÿ™ ÿßŸÑÿ™ŸàÿµŸäŸÑ ŸàÿßŸÑŸÖÿ¥ÿßŸàŸäÿ± ÿØÿßÿÆŸÑ ÿßŸÑŸÖÿØŸäŸÜÿ©',
    icon: 'üöö',
    color: 'blue',
  },
  {
    id: 'external_trips', 
    name: 'ÿßŸÑŸÖÿ¥ÿßŸàŸäÿ± ÿßŸÑÿÆÿßÿ±ÿ¨Ÿäÿ©',
    description: 'ÿßŸÑÿ±ÿ≠ŸÑÿßÿ™ ŸàÿßŸÑŸÖÿ¥ÿßŸàŸäÿ± ÿ®ŸäŸÜ ÿßŸÑŸÖÿØŸÜ',
    icon: 'üó∫Ô∏è',
    color: 'green',
  },
  {
    id: 'home_maintenance',
    name: 'ÿßŸÑÿµŸäÿßŸÜÿ© ÿßŸÑŸÖŸÜÿ≤ŸÑŸäÿ©', 
    description: 'ÿÆÿØŸÖÿßÿ™ ÿßŸÑÿµŸäÿßŸÜÿ© ŸàÿßŸÑÿ•ÿµŸÑÿßÿ≠ ÿßŸÑŸÖŸÜÿ≤ŸÑŸä',
    icon: 'üîß',
    color: 'orange',
  }
];

const properServices = [
  {
    name: 'ÿ™ŸàÿµŸäŸÑ ÿ∑ŸÑÿ®ÿßÿ™',
    category: 'internal_delivery',
    categoryName: 'ÿßŸÑÿ™ŸàÿµŸäŸÑ ŸàÿßŸÑŸÖÿ¥ÿßŸàŸäÿ± ÿßŸÑÿØÿßÿÆŸÑŸäÿ©',
    homeShortDescription: 'ÿÆÿØŸÖÿ© ÿ™ŸàÿµŸäŸÑ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ŸàÿßŸÑŸÖÿ¥ÿ™ÿ±Ÿäÿßÿ™',
    price: 'ÿ≠ÿ≥ÿ® ÿßŸÑŸÖÿ≥ÿßŸÅÿ©',
    duration: 'ÿ≠ÿ≥ÿ® ÿßŸÑŸÖŸàŸÇÿπ',
  },
  {
    name: 'ÿ±ÿ≠ŸÑÿßÿ™ ÿ®ŸäŸÜ ÿßŸÑŸÖÿØŸÜ',
    category: 'external_trips',
    categoryName: 'ÿßŸÑŸÖÿ¥ÿßŸàŸäÿ± ÿßŸÑÿÆÿßÿ±ÿ¨Ÿäÿ©', 
    homeShortDescription: 'ÿ±ÿ≠ŸÑÿßÿ™ ÿ¢ŸÖŸÜÿ© ŸàŸÖÿ±Ÿäÿ≠ÿ© ÿ®ŸäŸÜ ÿßŸÑŸÖÿØŸÜ',
    price: 'ÿ≠ÿ≥ÿ® ÿßŸÑŸÖÿ≥ÿßŸÅÿ©',
    duration: 'ÿ≠ÿ≥ÿ® ÿßŸÑŸàÿ¨Ÿáÿ©',
  },
  {
    name: 'ÿµŸäÿßŸÜÿ© ÿπÿßŸÖÿ©',
    category: 'home_maintenance',
    categoryName: 'ÿßŸÑÿµŸäÿßŸÜÿ© ÿßŸÑŸÖŸÜÿ≤ŸÑŸäÿ©',
    homeShortDescription: 'ÿÆÿØŸÖÿßÿ™ ÿßŸÑÿµŸäÿßŸÜÿ© ÿßŸÑŸÖŸÜÿ≤ŸÑŸäÿ© ÿßŸÑŸÖÿ™ŸÜŸàÿπÿ©', 
    price: 'ÿ≠ÿ≥ÿ® ŸÜŸàÿπ ÿßŸÑÿÆÿØŸÖÿ©',
    duration: 'ÿ≠ÿ≥ÿ® ÿßŸÑÿπŸÖŸÑ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®',
  }
];

export const fixCategoriesStructure = async () => {
  console.log('üîß Fixing categories structure...');
  
  try {
    // Clear existing categories
    const categoriesSnapshot = await getDocs(collection(db, 'categories'));
    for (const docSnapshot of categoriesSnapshot.docs) {
      await deleteDoc(doc(db, 'categories', docSnapshot.id));
    }
    console.log('üóëÔ∏è Cleared existing categories');

    // Add categories with proper custom IDs
    for (const category of properCategories) {
      const { id, ...categoryData } = category;
      await setDoc(doc(db, 'categories', id), {
        ...categoryData,
        createdAt: new Date().toISOString()
      });
    }
    console.log(`‚úÖ Added ${properCategories.length} categories with proper IDs`);

    // Clear existing services
    const servicesSnapshot = await getDocs(collection(db, 'services'));
    for (const docSnapshot of servicesSnapshot.docs) {
      await deleteDoc(doc(db, 'services', docSnapshot.id));
    }
    console.log('üóëÔ∏è Cleared existing services');

    // Add services
    for (const service of properServices) {
      await addDoc(collection(db, 'services'), {
        ...service,
        createdAt: new Date().toISOString()
      });
    }
    console.log(`‚úÖ Added ${properServices.length} services`);

    console.log('üéâ Database structure fixed successfully!');
    
    return {
      categories: properCategories.length,
      services: properServices.length
    };
  } catch (error) {
    console.error('‚ùå Error fixing database structure:', error);
    throw error;
  }
};

export const checkDatabaseStructure = async () => {
  console.log('üîç Checking database structure...');
  
  try {
    const [categoriesSnapshot, servicesSnapshot] = await Promise.all([
      getDocs(collection(db, 'categories')),
      getDocs(collection(db, 'services'))
    ]);

    console.log('üìä Current categories:');
    categoriesSnapshot.forEach(doc => {
      console.log(`  - ID: ${doc.id}, Name: ${doc.data().name}`);
    });

    console.log('üìä Current services:');
    servicesSnapshot.forEach(doc => {
      console.log(`  - ID: ${doc.id}, Name: ${doc.data().name}`);
    });

    return {
      categories: categoriesSnapshot.size,
      services: servicesSnapshot.size
    };
  } catch (error) {
    console.error('‚ùå Error checking database structure:', error);
    throw error;
  }
}; 