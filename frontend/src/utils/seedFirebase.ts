import { db } from '../firebase.config';
import { collection, addDoc, getDocs, deleteDoc, doc } from 'firebase/firestore';

// Real categories data
const realCategories = [
  {
    name: 'ÿßŸÑÿ™ŸàÿµŸäŸÑ ŸàÿßŸÑŸÖÿ¥ÿßŸàŸäÿ± ÿßŸÑÿØÿßÿÆŸÑŸäÿ©',
    description: 'ÿÆÿØŸÖÿßÿ™ ÿßŸÑÿ™ŸàÿµŸäŸÑ ŸàÿßŸÑŸÖÿ¥ÿßŸàŸäÿ± ÿØÿßÿÆŸÑ ÿßŸÑŸÖÿØŸäŸÜÿ©',
    icon: 'üöö',
    color: 'blue',
  },
  {
    name: 'ÿßŸÑŸÖÿ¥ÿßŸàŸäÿ± ÿßŸÑÿÆÿßÿ±ÿ¨Ÿäÿ©',
    description: 'ÿßŸÑÿ±ÿ≠ŸÑÿßÿ™ ŸàÿßŸÑŸÖÿ¥ÿßŸàŸäÿ± ÿ®ŸäŸÜ ÿßŸÑŸÖÿØŸÜ',
    icon: 'üó∫Ô∏è',
    color: 'green',
  },
  {
    name: 'ÿßŸÑÿµŸäÿßŸÜÿ© ÿßŸÑŸÖŸÜÿ≤ŸÑŸäÿ©',
    description: 'ÿÆÿØŸÖÿßÿ™ ÿßŸÑÿµŸäÿßŸÜÿ© ŸàÿßŸÑÿ•ÿµŸÑÿßÿ≠ ÿßŸÑŸÖŸÜÿ≤ŸÑŸä',
    icon: 'üîß',
    color: 'orange',
  }
];

// Real services data
const realServices = [
  {
    name: 'ÿ™ŸàÿµŸäŸÑ ÿ∑ŸÑÿ®ÿßÿ™',
    category: 'internal_delivery',
    categoryName: 'ÿßŸÑÿ™ŸàÿµŸäŸÑ ŸàÿßŸÑŸÖÿ¥ÿßŸàŸäÿ± ÿßŸÑÿØÿßÿÆŸÑŸäÿ©',
    homeShortDescription: 'ÿÆÿØŸÖÿ© ÿ™ŸàÿµŸäŸÑ ÿßŸÑÿ∑ŸÑÿ®ÿßÿ™ ŸàÿßŸÑŸÖÿ¥ÿ™ÿ±Ÿäÿßÿ™',
    price: 'ÿ≠ÿ≥ÿ® ÿßŸÑŸÖÿ≥ÿßŸÅÿ©',
    duration: 'ÿ≠ÿ≥ÿ® ÿßŸÑŸÖŸàŸÇÿπ',
  },
  {
    name: 'ÿ±ÿ≠ŸÑÿßÿ™ ÿ®ŸäŸÜ ÿßŸÑŸÖÿØŸÜ',
    category: 'external_trips',
    categoryName: 'ÿßŸÑŸÖÿ¥ÿßŸàŸäÿ± ÿßŸÑÿÆÿßÿ±ÿ¨Ÿäÿ©',
    homeShortDescription: 'ÿ±ÿ≠ŸÑÿßÿ™ ÿ¢ŸÖŸÜÿ© ŸàŸÖÿ±Ÿäÿ≠ÿ© ÿ®ŸäŸÜ ÿßŸÑŸÖÿØŸÜ',
    price: 'ÿ≠ÿ≥ÿ® ÿßŸÑŸÖÿ≥ÿßŸÅÿ©',
    duration: 'ÿ≠ÿ≥ÿ® ÿßŸÑŸàÿ¨Ÿáÿ©',
  },
  {
    name: 'ÿµŸäÿßŸÜÿ© ÿπÿßŸÖÿ©',
    category: 'home_maintenance',
    categoryName: 'ÿßŸÑÿµŸäÿßŸÜÿ© ÿßŸÑŸÖŸÜÿ≤ŸÑŸäÿ©',
    homeShortDescription: 'ÿÆÿØŸÖÿßÿ™ ÿßŸÑÿµŸäÿßŸÜÿ© ÿßŸÑŸÖŸÜÿ≤ŸÑŸäÿ© ÿßŸÑŸÖÿ™ŸÜŸàÿπÿ©',
    price: 'ÿ≠ÿ≥ÿ® ŸÜŸàÿπ ÿßŸÑÿÆÿØŸÖÿ©',
    duration: 'ÿ≠ÿ≥ÿ® ÿßŸÑÿπŸÖŸÑ ÿßŸÑŸÖÿ∑ŸÑŸàÿ®',
  }
];

// Real providers data with authentic Arabic names and phone numbers
const realProviders = [
  {
    name: 'ŸÖÿ≠ŸÖÿØ ÿπÿ®ÿØÿßŸÑŸÑŸá ÿßŸÑÿ£ÿ≠ŸÖÿØ',
    category: 'internal_delivery',
    whatsapp: '+966550123456',
    services: ['ÿ™ŸàÿµŸäŸÑ ÿ∑ŸÑÿ®ÿßÿ™'],
    rating: 4.5,
    available: true,
    specialties: ['ÿßŸÑÿ™ŸàÿµŸäŸÑ ÿßŸÑÿ≥ÿ±Ÿäÿπ'],
    destinations: ['ÿßŸÑÿ±Ÿäÿßÿ∂', 'ÿßŸÑÿØŸÖÿßŸÖ', 'ÿ¨ÿØÿ©'],
  },
  {
    name: 'ÿπÿ®ÿØÿßŸÑÿπÿ≤Ÿäÿ≤ ÿ≥ÿπÿØ ÿßŸÑŸÖÿ∑Ÿäÿ±Ÿä',
    category: 'external_trips',
    whatsapp: '+966551234567',
    services: ['ÿ±ÿ≠ŸÑÿßÿ™ ÿ®ŸäŸÜ ÿßŸÑŸÖÿØŸÜ'],
    rating: 4.7,
    available: true,
    specialties: ['ÿßŸÑÿ±ÿ≠ŸÑÿßÿ™ ÿßŸÑÿ∑ŸàŸäŸÑÿ©'],
    destinations: ['ÿ¨ŸÖŸäÿπ ŸÖŸÜÿßÿ∑ŸÇ ÿßŸÑŸÖŸÖŸÑŸÉÿ©'],
  },
  {
    name: 'ÿ£ÿ≠ŸÖÿØ ŸÅŸáÿØ ÿßŸÑÿ¥Ÿáÿ±Ÿä',
    category: 'home_maintenance',
    whatsapp: '+966552345678',
    services: ['ÿµŸäÿßŸÜÿ© ÿπÿßŸÖÿ©'],
    rating: 4.3,
    available: true,
    specialties: ['ÿßŸÑÿµŸäÿßŸÜÿ© ÿßŸÑŸÖŸÜÿ≤ŸÑŸäÿ©'],
    destinations: ['ÿßŸÑŸÖŸÜÿ∑ŸÇÿ© ÿßŸÑÿ¥ÿ±ŸÇŸäÿ©'],
  }
];

export const clearAllCollections = async () => {
  console.log('üóëÔ∏è Clearing all collections...');
  
  try {
    // Clear categories
    const categoriesSnapshot = await getDocs(collection(db, 'categories'));
    for (const docSnapshot of categoriesSnapshot.docs) {
      await deleteDoc(doc(db, 'categories', docSnapshot.id));
    }

    // Clear services
    const servicesSnapshot = await getDocs(collection(db, 'services'));
    for (const docSnapshot of servicesSnapshot.docs) {
      await deleteDoc(doc(db, 'services', docSnapshot.id));
    }

    // Clear providers
    const providersSnapshot = await getDocs(collection(db, 'providers'));
    for (const docSnapshot of providersSnapshot.docs) {
      await deleteDoc(doc(db, 'providers', docSnapshot.id));
    }

    // Clear bookings
    const bookingsSnapshot = await getDocs(collection(db, 'bookings'));
    for (const docSnapshot of bookingsSnapshot.docs) {
      await deleteDoc(doc(db, 'bookings', docSnapshot.id));
    }

    console.log('‚úÖ All collections cleared successfully');
  } catch (error) {
    console.error('‚ùå Error clearing collections:', error);
    throw error;
  }
};

export const seedFirebaseData = async () => {
  console.log('üå± Starting to seed Firebase with real data...');
  
  try {
    // Add categories
    console.log('üìÅ Adding categories...');
    for (const category of realCategories) {
      await addDoc(collection(db, 'categories'), {
        ...category,
        createdAt: new Date().toISOString()
      });
    }
    console.log(`‚úÖ Added ${realCategories.length} categories`);

    // Add services
    console.log('üõ†Ô∏è Adding services...');
    for (const service of realServices) {
      await addDoc(collection(db, 'services'), {
        ...service,
        createdAt: new Date().toISOString()
      });
    }
    console.log(`‚úÖ Added ${realServices.length} services`);

    // Add providers
    console.log('üë• Adding providers...');
    for (const provider of realProviders) {
      await addDoc(collection(db, 'providers'), {
        ...provider,
        createdAt: new Date().toISOString()
      });
    }
    console.log(`‚úÖ Added ${realProviders.length} providers`);

    console.log('üéâ Firebase real data seeding completed successfully!');
    
    return {
      categories: realCategories.length,
      services: realServices.length,
      providers: realProviders.length,
      bookings: 0
    };
  } catch (error) {
    console.error('‚ùå Error seeding Firebase data:', error);
    throw error;
  }
};

export const seedOnlyMissingData = async () => {
  console.log('üîç Checking for missing data...');
  
  try {
    // Check what's already in Firebase
    const [categoriesSnapshot, servicesSnapshot, providersSnapshot] = await Promise.all([
      getDocs(collection(db, 'categories')),
      getDocs(collection(db, 'services')),
      getDocs(collection(db, 'providers'))
    ]);

    const counts = {
      categories: categoriesSnapshot.size,
      services: servicesSnapshot.size,
      providers: providersSnapshot.size,
      bookings: 0 // Bookings will be added by real users only
    };

    console.log('üìä Current data counts:', counts);

    // Add categories if missing
    if (counts.categories === 0) {
      console.log('üìÅ Adding categories (missing)...');
      for (const category of realCategories) {
        await addDoc(collection(db, 'categories'), {
          ...category,
          createdAt: new Date().toISOString()
        });
      }
      console.log(`‚úÖ Added ${realCategories.length} categories`);
    }

    // Add services if missing
    if (counts.services === 0) {
      console.log('üõ†Ô∏è Adding services (missing)...');
      for (const service of realServices) {
        await addDoc(collection(db, 'services'), {
          ...service,
          createdAt: new Date().toISOString()
        });
      }
      console.log(`‚úÖ Added ${realServices.length} services`);
    }

    // Add providers if missing
    if (counts.providers === 0) {
      console.log('üë• Adding providers (missing)...');
      for (const provider of realProviders) {
        await addDoc(collection(db, 'providers'), {
          ...provider,
          createdAt: new Date().toISOString()
        });
      }
      console.log(`‚úÖ Added ${realProviders.length} providers`);
    }

    console.log('‚úÖ Missing data check completed!');
    return counts;
  } catch (error) {
    console.error('‚ùå Error checking/adding missing data:', error);
    throw error;
  }
}; 